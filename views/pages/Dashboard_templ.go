// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func DashboardPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div x-data=\"{\n        loading: false,\n        auth: pb.authStore,\n\n        async logout() {\n           this.loading = true; \n           try {\n                await pb.authStore.clear();\n                await loadContent(&#39;/login&#39;);\n           } catch (error) {\n               console.log(error);\n           } finally {\n               this.loading = false;\n           }\n        }\n    }\" x-init=\"if (!auth.isValid) loadContent(&#39;/login&#39;);\"><template x-if=\"auth.isValid\"><div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = DashboardContent().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></template></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func DashboardContent() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!-- Hero --><div class=\"relative overflow-hidden bg-gray-50 rounded-xl\"><div class=\"max-w-[85rem] mx-auto px-4 sm:px-6 lg:px-8 pt-24 pb-10\"><!-- Title --><div class=\"mt-5 max-w-xl text-center mx-auto\"><h1 class=\"block font-bold text-gray-800 text-4xl md:text-5xl lg:text-6xl\">Welcome to the Dashboard</h1></div><!-- End Title --><div class=\"mt-5 max-w-3xl text-center mx-auto\"><p class=\"text-lg text-gray-600\" x-text=\"auth.model.email\"></p></div><!-- Buttons --><div class=\"mt-8 gap-3 flex justify-center\"><button @click=\"logout\" class=\"inline-flex justify-center items-center text-gray-800 \n      gap-x-3 text-center border border-gray-200 bg-white text-sm hover:bg-gray-50\n      font-medium rounded-full py-3 px-4\">Log Out      </button></div><!-- End Buttons --></div></div><!-- End Hero --><!-- Card Blog --><div class=\"max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 mx-auto\"><!-- Title --><div class=\"max-w-2xl mx-auto text-center mb-10 lg:mb-14\"><h2 class=\"text-2xl font-bold md:text-4xl md:leading-tight\">My Cards</h2><p class=\"mt-1 text-gray-600\">Latest</p></div><!-- End Title --><!-- Grid --><div x-data=\"{\n      loading: false,\n      items: [],\n      page: 0,\n      totalPages: 1,\n\n      async loadItems(reset = false) {\n          this.loading = true;\n          if (reset) {this.page=0; this.items=[];};\n          if (!reset) this.page++;\n          try {\n            if (this.page &gt; this.totalPages) return;\n            const response = await pb.collection(&#39;cards&#39;).getList(this.page, 9, {\n                    sort: &#39;-created&#39;,\n                    filter: `user = &#39;${pb.authStore.model.id}&#39;`\n                })\n\n            this.items = [...this.items, ...response.items];\n            this.totalPages = response.totalPages;\n            if (reset) this.page++;\n          } catch (error) {\n            console.log(error);\n          } finally {\n              this.loading = false;\n          }\n\n      }\n  }\" x-init=\"$nextTick(() =&gt; loadItems())\" @items-modified.window=\"loadItems(true)\" class=\"relative\"><div class=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = CreateCard().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<template x-for=\"item in items\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = DashboardCard().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</template><template x-if=\"loading\"><span>loading ...</span></template></div><div class=\"mt-12 text-center\"><button :disabled=\"loading\" x-show=\"page &lt; totalPages\" @click=\"loadItems\" class=\"py-3 px-4 inline-flex\n        items-center gap-x-1 text-sm font-medium\n        rounded-full border border-gray-200 bg-white\n        text-blue-600 shadow-sm hover:bg-gray-50\n        focus:outline-none focus:bg-gray-50 disabled:opacity-50\n        disabled:pointer-events-none\">load more</button></div></div></div><!-- End Card Blog -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func DashboardCard() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div x-data=\"{\n        loading: false,\n        editMode: false,\n        card: item,\n        title: item.title,\n        content: item.content,\n\n        hasChanges() {\n            return this.title !== this.card.title || \n            this.content !== this.card.content;\n        },\n\n        async updateCard() {\n            this.loading = true;\n            if (!this.hasChanges()) {\n                this.editMode = false;\n                return;\n            }\n\n            try {\n                const record = await pb.collection(&#39;cards&#39;).update(this.card.id, {\n                    &#39;title&#39;: this.title,\n                    &#39;content&#39;: this.content,\n                    });\n                this.card = record;\n                this.editMode = false;\n            } catch (error) {\n                console.log(error);\n            } finally {\n                this.loading = false;\n            }\n        },\n\n        async deleteCard() {\n            this.loading = true;\n            try {\n                await pb.collection(&#39;cards&#39;).delete(this.card.id);\n                $dispatch(&#39;items-modified&#39;);\n            } catch (error) {\n                console.log(error);\n            } finally {\n                this.loading = false;\n            }\n        }\n    }\" class=\"group flex flex-col h-full aspect-[3/4] border border-gray-200 \n    hover:border-transparent hover:shadow-lg focus:outline-none\n    focus:border-transparent focus:shadow-lg transition duration-300\n    rounded-xl p-5\"><div class=\"relative h-full w-full flex items-center justify-center\n      text-center\"><div x-show=\"editMode\"><input x-model=\"title\" type=\"text\" class=\"text-xl font-semibold text-gray-800\"> <textarea x-model=\"content\" class=\"mt-5 text-gray-600\"></textarea></div><div x-show=\"!editMode\"><h3 x-text=\"title\" class=\"text-xl font-semibold text-gray-800\">Title</h3><p x-text=\"content\" class=\"mt-5 text-gray-600\">Content</p></div><div class=\"absolute top-2 end-2\"><button class=\"bg-gray-800 text-white py-1 px-4  rounded-md \" @click=\"editMode ? updateCard() : editMode = true\" x-text=\"editMode ? &#39;Submit&#39; : &#39;Edit&#39;\">Edit</button> <button @click=\"deleteCard\" class=\"border py-1 px-4 rounded-md border-gray-800 \">Delete</button></div></div></div><!-- End Card -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func CreateCard() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div x-data=\"{\n        loading: false,\n        visible: false,\n        title: &#39;&#39;,\n        content: &#39;&#39;,\n\n        async create() {\n            this.loading = true;\n            try {\n                const record = await pb.collection(&#39;cards&#39;).create({\n                        &#39;title&#39;: this.title,\n                        &#39;content&#39;: this.content,\n                        &#39;user&#39;: pb.authStore.model.id\n                    });\n                if (!record) throw new Error(&#39;could not be created!&#39;);\n                $dispatch(&#39;items-modified&#39;);\n                this.visible = false;\n                this.title= &#39;&#39;;\n                this.content = &#39;&#39;;\n            } catch (error) {\n                console.log(error);\n            } finally {\n                this.loading = false;\n            }\n        }\n\n    }\" class=\"group flex flex-col h-full aspect-[3/4] border border-gray-200 \n    hover:border-transparent hover:shadow-lg focus:outline-none\n    focus:border-transparent focus:shadow-lg transition duration-300\n    rounded-xl p-5\"><button x-show=\"!visible\" @click=\"visible = true\" class=\"w-full h-full flex items-center justify-center\"><span>Create New</span></button><div x-show=\"visible\" class=\"relative h-full w-full flex items-center justify-center\"><div class=\"space-y-4 pt-5\"><div><label for=\"titleInput\">Title</label> <input maxlength=\"80\" id=\"titleInput\" x-model=\"title\" type=\"text\" class=\"w-full min-h-12 border-2 border-gray-200 p-1.5 rounded\n                    font-semibold text-gray-800\" placeholder=\"Enter a title ...\"></div><div><label for=\"contentInput\">Content</label> <textarea maxlength=\"280\" id=\"contentInput\" x-model=\"content\" placeholder=\"Content here ...\" class=\"w-full resize-none min-h-36 border-2 border-gray-200 p-1.5 text-gray-600\n                    text-sm\"></textarea></div></div><div class=\"absolute top-2 end-2\"><button class=\"bg-gray-800 text-white py-1 px-4  rounded-md \" @click=\"create\" :disabled=\"loading || !title.trim() || !content.trim()\">Submit</button> <button @click=\"visible = false\" class=\"border py-1 px-4 rounded-md border-gray-800 \">Cancel</button></div></div></div><!-- End Card -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
