// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "GoCards/views/components"

func HomePage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!-- Hero --><div class=\"relative overflow-hidden before:absolute \nbefore:top-0 before:start-1/2 \nbefore:bg-[url(&#39;https://preline.co/assets/svg/examples/squared-bg-element.svg&#39;)] \nbefore:bg-no-repeat before:bg-top before:size-full before:-z-[1] before:transform\nbefore:-translate-x-1/2\"><div class=\"max-w-[85rem] mx-auto px-4 sm:px-6 lg:px-8 pt-24 pb-10\"><!-- Title --><div class=\"mt-5 max-w-xl text-center mx-auto\"><h1 class=\"block font-bold text-gray-800 text-4xl md:text-5xl lg:text-6xl\">Where Cards Go Places</h1></div><!-- End Title --><div class=\"mt-5 max-w-3xl text-center mx-auto\"><p class=\"text-lg text-gray-600\">Get inspired or inpire others :)</p></div><!-- Buttons --><div x-show=\"!pb.authStore.isValid\" class=\"mt-8 gap-3 flex justify-center\"><a class=\"inline-flex justify-center items-center gap-x-3\n      text-center bg-gradient-to-tl from-blue-600\n      to-blue-600 hover:from-blue-600 hover:to-blue-600\n      focus:outline-none focus:from-blue-600 focus:to-blue-600\n      border border-transparent text-white text-sm font-medium\n      rounded-full py-3 px-4\" href=\"/dashboard\" @click.prevent=\"loadContent(&#39;/dashboard&#39;)\">Sign In      </a></div><!-- End Buttons --></div></div><!-- End Hero --><!-- Card Blog --><div class=\"max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 mx-auto\"><!-- Title --><div class=\"max-w-2xl mx-auto text-center mb-10 lg:mb-14\"><h2 class=\"text-2xl font-bold md:text-4xl md:leading-tight\">The Cards</h2><p class=\"mt-1 text-gray-600\">Latest</p></div><!-- End Title --><!-- Grid --><div x-data=\"{\n      loading: false,\n      items: [],\n      page: 0,\n      totalPages: 1,\n\n      async loadItems() {\n          this.loading = true;\n          try {\n            this.page++;\n            if (this.page &gt; this.totalPages) return;\n            const response = await pb.collection(&#39;cards&#39;).getList(this.page, 9, {\n                    sort: &#39;-created&#39;,\n                })\n\n            this.items = [...this.items, ...response.items];\n            this.totalPages = response.totalPages;\n          } catch (error) {\n            console.log(error);\n          } finally {\n              this.loading = false;\n          }\n\n      }\n  }\" x-init=\"$nextTick(() =&gt; loadItems())\"><div class=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6\"><template x-for=\"item in items\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Card().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</template><template x-if=\"loading\"><span>loading ...</span></template></div><!-- Card --><div class=\"mt-12 text-center\"><button :disabled=\"loading\" x-show=\"page &lt; totalPages\" @click=\"loadItems\" class=\"py-3 px-4 inline-flex\n        items-center gap-x-1 text-sm font-medium\n        rounded-full border border-gray-200 bg-white\n        text-blue-600 shadow-sm hover:bg-gray-50\n        focus:outline-none focus:bg-gray-50 disabled:opacity-50\n        disabled:pointer-events-none\">load more</button></div></div><!-- End Card --></div><!-- End Card Blog -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func Card() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div x-data=\"{\n        verbose: false,\n        like: null,\n        likesCount: 0,\n\n        async fetchLike() {\n            if (!pb.authStore.isValid) return;\n            const userId = pb.authStore.model.id;\n\n            try {\n                this.like = await pb.collection(&#39;likes&#39;).getFirstListItem(\n                    `user=&#39;${userId}&#39; &amp;&amp; card = &#39;${item.id}&#39; `\n                ).catch(()=&gt; null);\n            } catch (error) {\n                console.log(error);\n            }\n        },\n\n        async fetchLikesCount() {\n            try {\n                this.likesCount = await pb.collection(&#39;likes&#39;).getList(1, 1, {\n                        filter: `card=&#39;${item.id}&#39;`,\n                        fields: &#39;id&#39;\n                    }).then(res =&gt; res.totalItems)\n            } catch (error) {\n                console.log(error);\n            }\n \n        },\n\n        async toggleLike() {\n            if (!pb.authStore.isValid) return;\n            const userId = pb.authStore.model.id;\n\n            try {\n                if (this.like) {\n                    await pb.collection(&#39;likes&#39;).delete(this.like.id);\n                    this.like = null;\n                    this.likesCount--;\n                } else {\n                    this.like = await pb.collection(&#39;likes&#39;).create({\n                            &#39;user&#39; : userId,\n                            &#39;card&#39;: item.id\n                        });\n\n                    this.likesCount++;\n                }\n            } catch (error) {\n                console.log(error);\n            }\n\n\n        }\n    }\" x-init=\"fetchLike\" class=\"group flex flex-col h-full aspect-[3/4] border border-gray-200 \n    hover:border-transparent hover:shadow-lg focus:outline-none\n    focus:border-transparent focus:shadow-lg transition duration-300\n    rounded-xl p-5\" @mouseenter=\"verbose = true; fetchLikesCount();\" @mouseleave=\"verbose = false\"><div class=\"relative h-full w-full flex items-center justify-center\n      text-center\"><div><h3 x-text=\"item.title\" class=\"text-xl font-semibold text-gray-800\">Title</h3><p x-transition x-show=\"verbose\" x-text=\"item.content\" class=\"mt-5 text-gray-600\">Content</p></div><div class=\"absolute top-2 end-2\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.IconHeart(templ.Attributes{
			"class":  "size-6",
			":class": "like ? 'fill-red-200' :'' ",
			"@click": "toggleLike()",
			"x-show": "verbose || like",
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<span x-show=\"verbose\" x-text=\"likesCount\"></span></div></div></div><!-- End Card -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
